(i=>{"use strict";let e=!1;const n=function(){if(!1===e){e=!0;const t=this.style,a=t.animationName,i=this.dataset.tfAnimation_hover;a&&(t.animationIterationCount=t.animationDelay=t.animationName="",this.classList.remove(a)),this.tfOn("animationend",function(t){this.classList.remove("animated","tb_hover_animate",t.animationName),this.style.animationName=this.style.willChange="",e=!1},{passive:!0,once:!0}),t.animationName=i,this.classList.add("animated","tb_hover_animate",i)}},s=t=>{i.imagesLoad(t).then(t=>{if(t.style.visibility="visible",t.hasAttribute("data-tf-animation")){t.hasAttribute("data-tf-animation_repeat")&&(t.style.animationIterationCount=t.dataset.tfAnimation_repeat),t.hasAttribute("data-tf-animation_delay")&&(t.style.animationDelay=t.dataset.tfAnimation_delay+"s");const a=t.dataset.tfAnimation;t.classList.add(a),t.style.animationName=a,t.tfOn("animationend",function(){this.style.animationIterationCount=this.style.animationDelay=this.style.willChange="",this.classList.remove("animated",a),this.removeAttribute("data-tf-animation")},{passive:!0,once:!0}).classList.add("animated")}t.classList.contains("hover-wow")&&(t=>{const a=["pointerenter","tf_custom_animate"];t.tfOff(a,n,{passive:!0}).tfOn(a,n,{passive:!0})})(t)})},o=new IntersectionObserver((a,i)=>{for(let t=a.length-1;-1<t;--t)!0===a[t].isIntersecting&&(i.unobserve(a[t].target),s(a[t].target))});i.on("tf_wow_init",a=>{i.animateCss().then(()=>{for(let t=a.length-1;-1<t;--t)a[t].style.willChange="transform,opacity",o.observe(a[t])})})})(Themify);